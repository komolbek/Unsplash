{% include 'header' %}

import UIKit

protocol {{ module_info.name }}ViewInput: class {
    @discardableResult
    func update(with viewModel: {{ module_info.name }}ViewModel, animated: Bool) -> Bool
    func setNeedsUpdate()
}

protocol {{ module_info.name }}ViewOutput: class {
    func viewDidLoad()
}

final class {{ module_info.name }}ViewController: UIViewController {

	private enum Constants {
	
	}

    private(set) var viewModel: {{ module_info.name }}ViewModel
    let output: {{ module_info.name }}ViewOutput

    var needsUpdate: Bool = true

    // MARK: -  Lifecycle

    init(viewModel: {{ module_info.name }}ViewModel, output: {{ module_info.name }}ViewOutput) {
        self.viewModel = viewModel
        self.output = output
        super.init(nibName: nil, bundle: nil)
    }

    required init?(coder aDecoder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }

    override func viewDidLoad() {
        super.viewDidLoad()
        output.viewDidLoad()
    }

    override func viewDidLayoutSubviews() {
        super.viewDidLayoutSubviews()
    }

    // MARK: -  Actions
}

// MARK: -  {{ module_info.name }}ViewInput

extension {{ module_info.name }}ViewController: {{ module_info.name }}ViewInput, ViewUpdatable {

    func setNeedsUpdate() {
        needsUpdate = true
    }

    @discardableResult
    func update(with viewModel: {{ module_info.name }}ViewModel, animated: Bool) -> Bool {
        let oldViewModel = self.viewModel
        guard needsUpdate || viewModel != oldViewModel else {
            return false
        }
        self.viewModel = viewModel

        // update view

        needsUpdate = false

        return true
    }
}
